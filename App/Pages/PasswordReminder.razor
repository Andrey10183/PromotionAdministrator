@page "/passwordReminder/{Email}"
@page "/passwordReminder"

@using Comandante.App.Components
@using Comandante.App.Components.UiComponents.LoadingButton
@using MediatR
@using Comandante.Application.Interfaces
@using System.ComponentModel.DataAnnotations
@using Comandante.Application.DomainIntents.Users.Query.GetUserByEmail

@inject NavigationManager NavManager
@inject IDialogService DialogService
@inject ISender Sender
@inject IEmailService EmailService

<MudGrid Justify="Justify.Center">
    <MudItem Style="height:calc(100vh - 90px)" Class="d-flex align-center">
        <MudPaper Class="pa-4" Elevation="20" Style="width:400px">
            <MudForm @ref="_form"
                     @bind-IsValid="@_success"
                     @bind-Errors="@_errors">
                <MudItem Class="d-flex flex-row align-center gap-3">
                    <MudIcon Size="Size.Large" Icon="@Icons.Material.Filled.Lightbulb" Color="Color.Warning"></MudIcon>
                    <MudText Typo="Typo.h6">Напомнить пароль</MudText>
                </MudItem>
                
                <MudItem Class="pt-2">
                    <MudText Typo="Typo.body2">Укажите ваш email. Ели данный email зарегистрирован в системе, пароль будет выслан на данную почту в ближайшее время. После этого вернитесь на страницу входа и введите указанный пароль</MudText>
                </MudItem>

                <MudTextField @bind-Value="@_email"
                              AutoFocus="false"
                              AdornmentIcon="@Icons.Material.Filled.Email"
                              Adornment="Adornment.Start"
                              HelperText="Введите ваш email"
                              Class="pt-5 pb-4"
                              Label="Email"
                              Required="true"
                              Immediate="true"
                              RequiredError="Email is required!"
                              Disabled="@_processing"
                              Validation="@(new EmailAddressAttribute() { ErrorMessage = "Данный email не валиден" })"/>
                
                <LoadingButton Variant="Variant.Outlined"
                               FullWidth=true
                               OnClick="OnRemindPassword"
                               Color="Color.Primary"
                               Processing="@_processing"
                               >
                    Напомнить пароль
                </LoadingButton>
                
                <MudItem Class="d-flex justify-center pt-2">
                    <MudLink Href="/" Color="Color.Primary">
                        На страницу входа
                    </MudLink>
                </MudItem>
                

                <MudItem Class="pt-3">
                    @if (_errorMessage is not null)
                    {
                        <MudAlert Severity="Severity.Warning"
                                  Variant="Variant.Outlined"
                                  Dense="true" Class="my-2">
                            @_errorMessage
                        </MudAlert>
                    }
                </MudItem>
                <LegalAspect/>
            </MudForm>
        </MudPaper>
    </MudItem>
</MudGrid>

@code {
    [Parameter] public string? Email { get; set; }

    MudForm? _form;

    bool _success;
    private string _email = "";
    private string? _errorMessage;
    private bool _processing;
    string[] _errors = { };

    protected override void OnInitialized()
    {
        _email = Email ?? string.Empty;
    }

    private async Task OnRemindPassword()
    {
        _processing = true;

        await RemindPassword();

        _processing = false;
    }

    private async Task RemindPassword()
    {
        try
        {
            var userQuery = new UserByEmailQuery(_email);
            var userResult = await Sender.Send(userQuery);

            if (userResult.IsFailure)
            {
                _errorMessage = userResult.Error.Description;
                return;
            }

            var sendResult = await EmailService.SendPasswordReminder(_email, userResult.Value?.Password);

            if (!sendResult)
            {
                _errorMessage = "Не удалось отправить email";
                return;
            }

            if (!(await IsPasswordReminderSended()))
                return;

            NavManager.NavigateTo("/");
        }
        catch (Exception e)
        {
            _errorMessage = "Произошла непредвиденная ошибка";
        }
    }

    private async Task<bool> IsPasswordReminderSended()
    {
        var result = await DialogService.ShowMessageBox(
            "Операция успешно выполнена",
            "Пароль выслан на указанную почту. Сейчас вы будете перенаправлены на страницу ввода пароля",
            yesText: "Продолжить", cancelText: "Остаться");
        return result != null;
    }
}
