@page "/eventGroups"

@using Comandante.App.Components.UiComponents.ContextMenu
@using Comandante.App.Components.UiComponents.Header
@using Comandante.App.Components.UiComponents.InfoBoard
@using Comandante.App.Components.UiComponents.OperationButton
@using Comandante.Domain.Entities
@using MediatR
@using Comandante.App.Components
@using Comandante.App.Helper
@using Comandante.App.ModelsVm
@using Comandante.App.Services
@using Comandante.Application.DomainIntents.EventGroups.Command.Delete
@using Comandante.Domain.Shared
@using Mapster

@inject ISender Sender
@inject IDialogService DialogService
@inject SenderService SenderService
@inject SnackBarService MsgService

<AuthorizeView Roles="MANAGEMENT_EVENTGROUP">
<Authorized Context="_">
<MudGrid Class="pa-1" Spacing="1">
    <MudItem sm="12" md="6">
        <MudTable T="EventGroup"
                  Items="@_eventGroups"
                  Hover="true"
                  SelectOnRowClick="true"
                  Loading="@_processing"
                  Filter="new Func<EventGroup ,bool>(EventGroupsFilterFuncWrapper)"
                  LoadingProgressColor="Color.Info"
                  OnRowClick="@OnEventGroupSelect"
                  RowStyleFunc="EventGroupSelectedStyle"
                  Dense=true
                  Elevation="5"
                  FixedHeader="true"
                  RowsPerPage="50"
                  FixedFooter="true"
                  Height="calc(100vh - 210px)">
            <ToolBarContent>
                <CustomHeader Name="Группы событий" Icon="@Icons.Material.Filled.EventNote" Color="Color.Success"/>
                <MudSpacer/>
                <MudTextField @bind-Value="_searchCompatibility"
                              FullWidth="false"
                              Adornment="Adornment.Start"
                              AdornmentIcon="@Icons.Material.Filled.Search"
                              IconSize="Size.Medium" Immediate="true"
                              Class="mt-0"/>
            </ToolBarContent>
            <HeaderContent>
                <MudTh><CustomHeader Icon="@Icons.Material.Filled.Numbers" IconSize="Size.Small" Typo="Typo.body2" Name="Код" /></MudTh>
                <MudTh><CustomHeader Icon="@Icons.Material.Filled.Article" IconSize="Size.Small" Typo="Typo.body2" Name="Наименование" /></MudTh>
                <MudTh><CustomHeader Icon="@Icons.Material.Filled.FontDownload" IconSize="Size.Small" Typo="Typo.body2" Name="Действует" /></MudTh>
                <MudTh><CustomHeader Icon="@Icons.Material.Filled.FontDownloadOff" IconSize="Size.Small" Typo="Typo.body2" Name="Удален" /></MudTh>
                <MudTh>
                    <AddButton @onclick="@OnAddEventGroup" />
                </MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Код"
                       @ondblclick="@(() => OnEditEventGroup(context))">
                    <b>@context.Id</b>
                </MudTd>
                <MudTd DataLabel="Наименование"
                       @ondblclick="@(() => OnEditEventGroup(context))">
                    @context.Name
                </MudTd>
                <MudTd DataLabel="Действует"
                       @ondblclick="@(() => OnEditEventGroup(context))">
                    <MudCheckBox Value="@context.IsActive" Disabled="true"/>
                </MudTd>
                <MudTd DataLabel="Удален" @ondblclick="@(() => OnEditEventGroup(context))">
                    <MudCheckBox Value="@context.IsDeleted" Disabled="true"/>
                </MudTd>
                <MudTd>
                    <ContextMenu OnCreateClick="@OnAddEventGroup"
                                 OnEditClick="@((grEvent) => OnEditEventGroup(context))"
                                 OnDeleteClick="@(() => OnDeleteEventGroup(context.Id))"
                                 OnRefreshClick="@UpdateData" />
                </MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager />
            </PagerContent>
        </MudTable>
    </MudItem>
    <MudItem sm="12" md="6">
        <EventGroupDetails EventGroupId="@_selectedEventGroup?.Id"
                           ShowToolBar="true"
                           Height="calc(100vh - 210px)" />
    </MudItem>
</MudGrid>
</Authorized>
    <NotAuthorized>
        @if (@context.User.Identity?.IsAuthenticated ?? false )
        {
            <AccessDeniedBoard />
        }
        else
        {
            <RedirectToLogin/>
        }
    </NotAuthorized>
</AuthorizeView>


@code {

    private List<EventGroup> _eventGroups = new();
    private EventGroup? _selectedEventGroup;

    private bool _processing;
    private bool _editStarted;
    private string _searchCompatibility = string.Empty;

    private void OnEventGroupSelect(TableRowClickEventArgs<EventGroup> p)
    {
        _selectedEventGroup = p.Item;
    }

    protected override async Task OnInitializedAsync()
    {
        await UpdateData();
    }

    private async Task UpdateData()
    {
        _processing = true;

        _eventGroups = await SenderService.GetEventGroups();

        if (_eventGroups?.Any() == true)
        {
            _selectedEventGroup = _eventGroups.First();
        }
        
        _processing = false;
    }

    private async Task OnAddEventGroup()
    {
        var eventGroup = EventGroup.Create();
        await EditEventGroup(eventGroup, false);
    }

    private async Task OnEditEventGroup(EventGroup eventGroup)
    {
        await EditEventGroup(eventGroup);
    }

    private async Task OnDeleteEventGroup(string id)
    {
        if (!(await IsDeletionConfirmed()))
            return;

        var command = new DeleteEventGroupCommand(id);
        var result = await Sender.Send(command);

        if (result.IsSuccess)
        {
            MsgService.ShowMessage(Severity.Success, $"Группа событий успешно удалена. Всего удалено связанных записей {result.Value}");
            await UpdateData();
        }
        else
        {
            MsgService.ShowMessage(Severity.Error, $"Ошибка удаления. {result.Error.Description}");
        }
    }

    private async Task EditEventGroup(EventGroup eventGroup, bool isEdit = true)
    {
        if (_editStarted) return;

        _editStarted = true;

        var eventGroupVm = eventGroup.Adapt<EventGroupVm>();

        var parameters = new DialogParameters { ["EventGroup"] = eventGroupVm, ["IsEdit"] = isEdit };
        var dialog = await DialogService.ShowAsync<AddOrEditEventGroups>(
            $"Группа событий", 
            parameters, 
            DialogOptionsFactory.Create(MaxWidth.ExtraSmall));

        var result = await dialog.Result;

        if (!result.Canceled)
        {
            var res = result.Data as Result<EventGroup>;
            if (res is {IsSuccess: true })
            {
                MsgService.ShowMessage(Severity.Success, "Группа событий успешно сохранена/обновлена");
                await UpdateData();
            }
            else
            {
                MsgService.ShowMessage(Severity.Error, $"Ошибка обновления сохранения/обновления данных.{res.Error.Description}");
            }
        }

        _editStarted = false;
    }
    
    #region Utility

    private string EventGroupSelectedStyle(EventGroup arg1, int index)
    {
        if (_selectedEventGroup is null) return string.Empty;

        return StyleHelper.GetSelectedRowStyle(_selectedEventGroup.Id == arg1.Id);
    }

    private bool EventGroupsFilterFuncWrapper(EventGroup element) =>
        EventGroupsFilterFunc(element, _searchCompatibility);

    private async Task<bool> IsDeletionConfirmed()
    {
        bool? result = await DialogService.ShowMessageBox(
            "Внимание",
            "Выполнение данного действия приведет к удалению записи из базы данных! Так же будут удалены все связанные с данной группой события если они не привязаны к другим акциям или условиям Хотите продолжить?",
            yesText: "Удалить!", cancelText: "Отмена");
        return result != null;
    }

    private bool EventGroupsFilterFunc(EventGroup element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Id.Equals(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Name?.Contains(searchString, StringComparison.OrdinalIgnoreCase) ?? false)
            return true;
        return false;
    }

    #endregion
}


