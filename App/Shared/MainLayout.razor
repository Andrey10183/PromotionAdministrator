@using Comandante.App.Components
@using Comandante.App.Components.UiComponents.Vessions
@using Comandante.App.Helper
@using Comandante.App.Services

@inject AuthenticationStateProvider AuthProvider
@inject AuthenticationService AuthService
@inject NavigationManager NavManager

<MudThemeProvider />
<MudDialogProvider />
<MudSnackbarProvider />


@inherits LayoutComponentBase

<PageTitle>App</PageTitle>

<MudLayout>
    <MudAppBar>
        <AuthorizeView>
            <Authorized>
                <MudIconButton Icon="@Icons.Material.Filled.Menu"
                               Color="Color.Inherit"
                               Edge="Edge.Start"
                               OnClick="@((e) => DrawerToggle())" />
                <MudSpacer />
                
                <MudItem Class="d-flex justify-center align-center gap-2">
                    <MudText>
                        @GetUserName(context)
                    </MudText>
                    <MudMenu AnchorOrigin="Origin.BottomLeft"
                             TransformOrigin="Origin.TopRight">
                        <ActivatorContent>
                            @if (IsUserImageExist(context))
                            {
                                <MudAvatar Color="Color.Warning"
                                           Variant="Variant.Filled">
                                    <MudImage Src="@context.User.FindFirst("Image")?.Value" />
                                </MudAvatar>
                            }
                            else
                            {
                                <MudAvatar Color="Color.Warning"
                                           Variant="Variant.Filled">
                                    @(UserHelper.GetInitialsFromUserName(@context.User.Identity?.Name))
                                </MudAvatar>
                            }

                        </ActivatorContent>
                        <ChildContent>
                            <MudMenuItem Icon="@Icons.Material.Sharp.Logout" OnClick="SignOut">Выйти</MudMenuItem>
                        </ChildContent>
                    </MudMenu>
                </MudItem>
            </Authorized>
        </AuthorizeView>

    </MudAppBar>

    <MudDrawer @bind-Open="@_drawerOpen" Height="calc(100vh - 5px)">
        <MudItem Class="d-flex flex-column align-bottom">
            <MudItem>
                <NavMenu/>
                <MudItem Class="sidebarmen" />
            </MudItem>
            <MudItem>
                <MudItem Class="sulpakLogo"/>
                <VersionInfo />
                <LegalAspect />
            </MudItem>
        </MudItem>
    </MudDrawer>
    
    <MudMainContent>
        @Body
    </MudMainContent>
</MudLayout>

<style>
    .sidebarmen {
        padding-top: 50px;
        background-image: url('assets/menu-background.png');
        background-size: 403px 405px;
        background-repeat: no-repeat;
        background-position-x: center;
        height: 297px;
        box-shadow: 0 0 10px 10px white inset;
    }

    .sulpakLogo {
        padding-top: 100px;
        background-image: url('assets/SulpakLogo.png');
        background-size: 150px 50px;
        background-repeat: no-repeat;
        background-position-x: center;
        background-position-y: center;
        height: 50px;
    }
</style>

@code {

    bool _drawerOpen = true;

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    private void SignOut()
    {
        AuthService.LogOut();

        NavManager.NavigateTo("/");
    }

    private bool IsUserImageExist(AuthenticationState authState)
    {
        var userImage = authState.User.FindFirst("Image")?.Value;
        var result = !string.IsNullOrEmpty(userImage);

        return result;
    }
    
    private string GetUserName(AuthenticationState authState)
    {
        var result =
            string.IsNullOrWhiteSpace(authState.User.Identity?.Name) ||
            string.IsNullOrWhiteSpace(authState.User.Identity?.Name) ?
                "Имя не задано" :
                authState.User.Identity.Name;

        return result;
    }
}
